services:

  pgadmin:
    image: dpage/pgadmin4:${PGADMIN_VERSION}
    # container_name: pgadmincontainer
    # ports:
    #   - ${PGADMIN_PORT}:80
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmindata:/var/lib/pgadmin
      - ./pgadmin/servers.json:/pgadmin4/servers.json
      # https://forums.docker.com/t/automatically-connect-pgadmin-to-a-postgresql-volume-on-which-there-is-a-database-and-automatically-load-a-schema-present-on-a-sql-file-with-docker-compose/124647
    restart: ${RESTART_POLICY}
    depends_on:
      - tsdb

  swaggerui:
    image: swaggerapi/swagger-ui:${SWAGGERUI_VERSION}
    # container_name: swaggercontainer
    # ports:
    #   - ${SWAGGERUI_PORT}:8080
    # expose:
    #   - ${SWAGGERUI_PORT}
    environment:
      API_URL: ${PGRST_OPENAPI_SERVER_PROXY_URI}
      # VALIDATOR_URL: "localhost" # optional
    restart: ${RESTART_POLICY}
    depends_on:
      - pgrst
      - tsdb

  pgrst:
    # scale
    image: postgrest/postgrest:${PGRST_VERSION}
    # container_name: pgrstcontainer
    # ports:
    #   - ${PGRST_PORT}:3000
    environment:
      PGRST_DB_URI: postgres://authenticator:${PGRST_JWT_SECRET}@tsdb:${POSTGRES_PORT}/${POSTGRES_DB}
      PGRST_OPENAPI_SERVER_PROXY_URI: ${PGRST_OPENAPI_SERVER_PROXY_URI}
      PGRST_DB_SCHEMAS: api
      PGRST_DB_ANON_ROLE: api_anon
      PGRST_OPENAPI_SECURITY_ACTIVE: 1 # true
      PGRST_JWT_SECRET: ${PGRST_JWT_SECRET}
      # !Todo: Keycloak/Auth0 authentication 
      # PGRST_ROLE_CLAIM_KEY: ${PGRST_ROLE_CLAIM_KEY}
      # PGRST_DB_PRE_REQUEST: ${PGRST_DB_PRE_REQUEST}
    restart: ${RESTART_POLICY}
    depends_on:
      - tsdb
    deploy:
      replicas: 1

  tsdb:
    # image: timescale/timescaledb:${TIMESCALEDB_VERSION} # old
    # two different licence models are available: https://www.timescale.com/legal/licenses 
    image: timescale/timescaledb-ha:${TIMESCALEDB_VERSION} # ha (high availability)
    # container_name: tsdbcontainer
    # ports:
    #   - ${POSTGRES_PORT}:5432
    environment:
      TIMESCALEDB_TELEMETRY: ${TIMESCALEDB_TELEMETRY}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # TS_TUNE_MEMORY: ${TS_TUNE_MEMORY}
      # TS_TUNE_NUM_CPUS: ${TS_TUNE_NUM_CPUS}
    command: -c 'max_connections=2000'
    volumes:
      # - pgdata:/var/lib/postgresql/data # old
      # https://docs.timescale.com/self-hosted/latest/install/installation-docker/#more-docker-options
      - pgdata:/home/postgres/pgdata/data # ha
      - ./docker-entrypoint:/docker-entrypoint-initdb.d
    restart: ${RESTART_POLICY}

volumes:
  pgdata: {}
  pgadmindata: {}
