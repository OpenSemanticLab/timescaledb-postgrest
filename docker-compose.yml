services:
  swaggerui:
    image: swaggerapi/swagger-ui:${SWAGGERUI_VERSION}
    container_name: swaggercontainer
    # ports:
    #   - ${SWAGGERUI_PORT}:8080
    # expose:
    #   - ${SWAGGERUI_PORT}
    environment:
      API_URL: ${PGRST_OPENAPI_SERVER_PROXY_URI}
      # VALIDATOR_URL: "localhost" # optional
    restart: unless-stopped
    depends_on:
      - pgrst
      - tsdb

  pgrst:
    image: postgrest/postgrest:${PGRST_VERSION}
    container_name: pgrstcontainer
    # ports:
    #   - ${PGRST_PORT}:3000
    environment:
      PGRST_DB_URI: postgres://authenticator:${PGRST_PASSWORD}@tsdb:${POSTGRES_PORT}/${POSTGRES_DB}
      PGRST_OPENAPI_SERVER_PROXY_URI: ${PGRST_OPENAPI_SERVER_PROXY_URI}
      PGRST_DB_SCHEMAS: api
      PGRST_DB_ANON_ROLE: api_anon
      PGRST_OPENAPI_SECURITY_ACTIVE: true
      PGRST_JWT_SECRET: ${PGRST_JWT_SECRET}
      # !Todo: Keycloak/Auth0 authentication 
      # PGRST_ROLE_CLAIM_KEY: ${PGRST_ROLE_CLAIM_KEY}
      # PGRST_DB_PRE_REQUEST: ${PGRST_DB_PRE_REQUEST}
    restart: unless-stopped
    depends_on:
      - tsdb

  tsdb:
    image: timescale/timescaledb:${TIMESCALEDB_VERSION}
    container_name: tsdbcontainer
    # ports:
    #   - ${POSTGRES_PORT}:5432
    environment:
      TIMESCALEDB_TELEMETRY: ${TIMESCALEDB_TELEMETRY}
      TS_TUNE_MEMORY: ${TS_TUNE_MEMORY}
      TS_TUNE_NUM_CPUS: ${TS_TUNE_NUM_CPUS}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./docker-entrypoint:/docker-entrypoint-initdb.d
    restart: unless-stopped

volumes:
  pgdata: {}
